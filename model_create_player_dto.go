/*
L3vels Api

L3vels API for Game developers

API version: 0.3
Contact: support@l3vels.xyz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package l3vels-sdk

import (
	"encoding/json"
)

// checks if the CreatePlayerDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePlayerDto{}

// CreatePlayerDto struct for CreatePlayerDto
type CreatePlayerDto struct {
	// You can send your generated unique ID for player if it's handy for game. If field is empty, we will generate unique ID.
	UniqueId *string `json:"unique_id,omitempty"`
	// The name of the player.
	Name string `json:"name"`
	// The username of the player.
	Username *string `json:"username,omitempty"`
	// The email of the player.
	Email *string `json:"email,omitempty"`
	// The image URL of the player avatar.
	Avatar *string `json:"avatar,omitempty"`
	// Game/project ID to create the player for. Example: Create player Jack for game Fortnite.
	ProjectId string `json:"project_id"`
	// Should create wallet for player or not.
	IsCreateWallet *bool `json:"is_create_wallet,omitempty"`
	// Custom props for player.
	CustomProps []string `json:"custom_props,omitempty"`
}

// NewCreatePlayerDto instantiates a new CreatePlayerDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePlayerDto(name string, projectId string) *CreatePlayerDto {
	this := CreatePlayerDto{}
	this.Name = name
	this.ProjectId = projectId
	return &this
}

// NewCreatePlayerDtoWithDefaults instantiates a new CreatePlayerDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePlayerDtoWithDefaults() *CreatePlayerDto {
	this := CreatePlayerDto{}
	return &this
}

// GetUniqueId returns the UniqueId field value if set, zero value otherwise.
func (o *CreatePlayerDto) GetUniqueId() string {
	if o == nil || IsNil(o.UniqueId) {
		var ret string
		return ret
	}
	return *o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePlayerDto) GetUniqueIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueId) {
		return nil, false
	}
	return o.UniqueId, true
}

// HasUniqueId returns a boolean if a field has been set.
func (o *CreatePlayerDto) HasUniqueId() bool {
	if o != nil && !IsNil(o.UniqueId) {
		return true
	}

	return false
}

// SetUniqueId gets a reference to the given string and assigns it to the UniqueId field.
func (o *CreatePlayerDto) SetUniqueId(v string) {
	o.UniqueId = &v
}

// GetName returns the Name field value
func (o *CreatePlayerDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreatePlayerDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreatePlayerDto) SetName(v string) {
	o.Name = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *CreatePlayerDto) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePlayerDto) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *CreatePlayerDto) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *CreatePlayerDto) SetUsername(v string) {
	o.Username = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CreatePlayerDto) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePlayerDto) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CreatePlayerDto) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CreatePlayerDto) SetEmail(v string) {
	o.Email = &v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *CreatePlayerDto) GetAvatar() string {
	if o == nil || IsNil(o.Avatar) {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePlayerDto) GetAvatarOk() (*string, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *CreatePlayerDto) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *CreatePlayerDto) SetAvatar(v string) {
	o.Avatar = &v
}

// GetProjectId returns the ProjectId field value
func (o *CreatePlayerDto) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *CreatePlayerDto) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *CreatePlayerDto) SetProjectId(v string) {
	o.ProjectId = v
}

// GetIsCreateWallet returns the IsCreateWallet field value if set, zero value otherwise.
func (o *CreatePlayerDto) GetIsCreateWallet() bool {
	if o == nil || IsNil(o.IsCreateWallet) {
		var ret bool
		return ret
	}
	return *o.IsCreateWallet
}

// GetIsCreateWalletOk returns a tuple with the IsCreateWallet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePlayerDto) GetIsCreateWalletOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCreateWallet) {
		return nil, false
	}
	return o.IsCreateWallet, true
}

// HasIsCreateWallet returns a boolean if a field has been set.
func (o *CreatePlayerDto) HasIsCreateWallet() bool {
	if o != nil && !IsNil(o.IsCreateWallet) {
		return true
	}

	return false
}

// SetIsCreateWallet gets a reference to the given bool and assigns it to the IsCreateWallet field.
func (o *CreatePlayerDto) SetIsCreateWallet(v bool) {
	o.IsCreateWallet = &v
}

// GetCustomProps returns the CustomProps field value if set, zero value otherwise.
func (o *CreatePlayerDto) GetCustomProps() []string {
	if o == nil || IsNil(o.CustomProps) {
		var ret []string
		return ret
	}
	return o.CustomProps
}

// GetCustomPropsOk returns a tuple with the CustomProps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePlayerDto) GetCustomPropsOk() ([]string, bool) {
	if o == nil || IsNil(o.CustomProps) {
		return nil, false
	}
	return o.CustomProps, true
}

// HasCustomProps returns a boolean if a field has been set.
func (o *CreatePlayerDto) HasCustomProps() bool {
	if o != nil && !IsNil(o.CustomProps) {
		return true
	}

	return false
}

// SetCustomProps gets a reference to the given []string and assigns it to the CustomProps field.
func (o *CreatePlayerDto) SetCustomProps(v []string) {
	o.CustomProps = v
}

func (o CreatePlayerDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePlayerDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UniqueId) {
		toSerialize["unique_id"] = o.UniqueId
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	toSerialize["project_id"] = o.ProjectId
	if !IsNil(o.IsCreateWallet) {
		toSerialize["is_create_wallet"] = o.IsCreateWallet
	}
	if !IsNil(o.CustomProps) {
		toSerialize["custom_props"] = o.CustomProps
	}
	return toSerialize, nil
}

type NullableCreatePlayerDto struct {
	value *CreatePlayerDto
	isSet bool
}

func (v NullableCreatePlayerDto) Get() *CreatePlayerDto {
	return v.value
}

func (v *NullableCreatePlayerDto) Set(val *CreatePlayerDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePlayerDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePlayerDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePlayerDto(val *CreatePlayerDto) *NullableCreatePlayerDto {
	return &NullableCreatePlayerDto{value: val, isSet: true}
}

func (v NullableCreatePlayerDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePlayerDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


