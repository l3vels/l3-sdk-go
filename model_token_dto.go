/*
L3vels Api

L3vels API for Game developers

API version: 0.3
Contact: support@l3vels.xyz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package l3vels-sdk

import (
	"encoding/json"
)

// checks if the TokenDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenDto{}

// TokenDto struct for TokenDto
type TokenDto struct {
	// Token ID to mint. You can provide this or asset_id
	TokenId *float32 `json:"token_id,omitempty"`
	// Asset ID to mint. You can provide this or token_id
	AssetId *string `json:"asset_id,omitempty"`
	// Amount to mint
	Amount float32 `json:"amount"`
}

// NewTokenDto instantiates a new TokenDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenDto(amount float32) *TokenDto {
	this := TokenDto{}
	this.Amount = amount
	return &this
}

// NewTokenDtoWithDefaults instantiates a new TokenDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenDtoWithDefaults() *TokenDto {
	this := TokenDto{}
	return &this
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *TokenDto) GetTokenId() float32 {
	if o == nil || IsNil(o.TokenId) {
		var ret float32
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenDto) GetTokenIdOk() (*float32, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *TokenDto) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given float32 and assigns it to the TokenId field.
func (o *TokenDto) SetTokenId(v float32) {
	o.TokenId = &v
}

// GetAssetId returns the AssetId field value if set, zero value otherwise.
func (o *TokenDto) GetAssetId() string {
	if o == nil || IsNil(o.AssetId) {
		var ret string
		return ret
	}
	return *o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenDto) GetAssetIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssetId) {
		return nil, false
	}
	return o.AssetId, true
}

// HasAssetId returns a boolean if a field has been set.
func (o *TokenDto) HasAssetId() bool {
	if o != nil && !IsNil(o.AssetId) {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given string and assigns it to the AssetId field.
func (o *TokenDto) SetAssetId(v string) {
	o.AssetId = &v
}

// GetAmount returns the Amount field value
func (o *TokenDto) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TokenDto) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TokenDto) SetAmount(v float32) {
	o.Amount = v
}

func (o TokenDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	if !IsNil(o.AssetId) {
		toSerialize["asset_id"] = o.AssetId
	}
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

type NullableTokenDto struct {
	value *TokenDto
	isSet bool
}

func (v NullableTokenDto) Get() *TokenDto {
	return v.value
}

func (v *NullableTokenDto) Set(val *TokenDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenDto(val *TokenDto) *NullableTokenDto {
	return &NullableTokenDto{value: val, isSet: true}
}

func (v NullableTokenDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


