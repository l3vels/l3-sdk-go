/*
L3vels Api

L3vels API for Game developers

API version: 0.3
Contact: support@l3vels.xyz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package l3vels-sdk

import (
	"encoding/json"
	"time"
)

// checks if the Player type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Player{}

// Player struct for Player
type Player struct {
	// The unique identifier for the Player entity.
	Id string `json:"id"`
	// The unique ID of the Player that can be provided by customers or generated by us.
	UniqueId string `json:"unique_id"`
	// The name of the player
	Name string `json:"name"`
	// Username of the player
	Username string `json:"username"`
	// Email of the player
	Email string `json:"email"`
	// Avatar URL of the player
	Avatar string `json:"avatar"`
	// Custom props for player
	CustomProps map[string]interface{} `json:"custom_props"`
	// The date when player was active last time
	LastSeen time.Time `json:"last_seen"`
	// The unique identifier of the account that the Player belongs to.
	AccountId float32 `json:"account_id"`
	// The unique identifier of the project that the Player is associated with. This allows developers to organize their players by project and helps with tracking and reporting. Example: Player Jack is associated with project Fortnite.
	ProjectId string `json:"project_id"`
	// The date when the player was created.
	CreatedOn time.Time `json:"created_on"`
	// The date when the player was last modified.
	ModifiedOn time.Time `json:"modified_on"`
	// The Id of the user who created the player.
	CreatedBy float32 `json:"created_by"`
	// The Id of the user who last modified the player.
	ModifiedBy float32 `json:"modified_by"`
	// Boolean value indicating whether the player has wallet or not
	IsCreateWallet bool `json:"is_create_wallet"`
}

// NewPlayer instantiates a new Player object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayer(id string, uniqueId string, name string, username string, email string, avatar string, customProps map[string]interface{}, lastSeen time.Time, accountId float32, projectId string, createdOn time.Time, modifiedOn time.Time, createdBy float32, modifiedBy float32, isCreateWallet bool) *Player {
	this := Player{}
	this.Id = id
	this.UniqueId = uniqueId
	this.Name = name
	this.Username = username
	this.Email = email
	this.Avatar = avatar
	this.CustomProps = customProps
	this.LastSeen = lastSeen
	this.AccountId = accountId
	this.ProjectId = projectId
	this.CreatedOn = createdOn
	this.ModifiedOn = modifiedOn
	this.CreatedBy = createdBy
	this.ModifiedBy = modifiedBy
	this.IsCreateWallet = isCreateWallet
	return &this
}

// NewPlayerWithDefaults instantiates a new Player object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerWithDefaults() *Player {
	this := Player{}
	return &this
}

// GetId returns the Id field value
func (o *Player) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Player) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Player) SetId(v string) {
	o.Id = v
}

// GetUniqueId returns the UniqueId field value
func (o *Player) GetUniqueId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value
// and a boolean to check if the value has been set.
func (o *Player) GetUniqueIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UniqueId, true
}

// SetUniqueId sets field value
func (o *Player) SetUniqueId(v string) {
	o.UniqueId = v
}

// GetName returns the Name field value
func (o *Player) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Player) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Player) SetName(v string) {
	o.Name = v
}

// GetUsername returns the Username field value
func (o *Player) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *Player) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *Player) SetUsername(v string) {
	o.Username = v
}

// GetEmail returns the Email field value
func (o *Player) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *Player) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *Player) SetEmail(v string) {
	o.Email = v
}

// GetAvatar returns the Avatar field value
func (o *Player) GetAvatar() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value
// and a boolean to check if the value has been set.
func (o *Player) GetAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Avatar, true
}

// SetAvatar sets field value
func (o *Player) SetAvatar(v string) {
	o.Avatar = v
}

// GetCustomProps returns the CustomProps field value
func (o *Player) GetCustomProps() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.CustomProps
}

// GetCustomPropsOk returns a tuple with the CustomProps field value
// and a boolean to check if the value has been set.
func (o *Player) GetCustomPropsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.CustomProps, true
}

// SetCustomProps sets field value
func (o *Player) SetCustomProps(v map[string]interface{}) {
	o.CustomProps = v
}

// GetLastSeen returns the LastSeen field value
func (o *Player) GetLastSeen() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value
// and a boolean to check if the value has been set.
func (o *Player) GetLastSeenOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastSeen, true
}

// SetLastSeen sets field value
func (o *Player) SetLastSeen(v time.Time) {
	o.LastSeen = v
}

// GetAccountId returns the AccountId field value
func (o *Player) GetAccountId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *Player) GetAccountIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *Player) SetAccountId(v float32) {
	o.AccountId = v
}

// GetProjectId returns the ProjectId field value
func (o *Player) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *Player) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *Player) SetProjectId(v string) {
	o.ProjectId = v
}

// GetCreatedOn returns the CreatedOn field value
func (o *Player) GetCreatedOn() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value
// and a boolean to check if the value has been set.
func (o *Player) GetCreatedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedOn, true
}

// SetCreatedOn sets field value
func (o *Player) SetCreatedOn(v time.Time) {
	o.CreatedOn = v
}

// GetModifiedOn returns the ModifiedOn field value
func (o *Player) GetModifiedOn() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedOn
}

// GetModifiedOnOk returns a tuple with the ModifiedOn field value
// and a boolean to check if the value has been set.
func (o *Player) GetModifiedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedOn, true
}

// SetModifiedOn sets field value
func (o *Player) SetModifiedOn(v time.Time) {
	o.ModifiedOn = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *Player) GetCreatedBy() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *Player) GetCreatedByOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *Player) SetCreatedBy(v float32) {
	o.CreatedBy = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Player) GetModifiedBy() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Player) GetModifiedByOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Player) SetModifiedBy(v float32) {
	o.ModifiedBy = v
}

// GetIsCreateWallet returns the IsCreateWallet field value
func (o *Player) GetIsCreateWallet() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsCreateWallet
}

// GetIsCreateWalletOk returns a tuple with the IsCreateWallet field value
// and a boolean to check if the value has been set.
func (o *Player) GetIsCreateWalletOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsCreateWallet, true
}

// SetIsCreateWallet sets field value
func (o *Player) SetIsCreateWallet(v bool) {
	o.IsCreateWallet = v
}

func (o Player) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Player) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["unique_id"] = o.UniqueId
	toSerialize["name"] = o.Name
	toSerialize["username"] = o.Username
	toSerialize["email"] = o.Email
	toSerialize["avatar"] = o.Avatar
	toSerialize["custom_props"] = o.CustomProps
	toSerialize["last_seen"] = o.LastSeen
	toSerialize["account_id"] = o.AccountId
	toSerialize["project_id"] = o.ProjectId
	toSerialize["created_on"] = o.CreatedOn
	toSerialize["modified_on"] = o.ModifiedOn
	toSerialize["created_by"] = o.CreatedBy
	toSerialize["modified_by"] = o.ModifiedBy
	toSerialize["is_create_wallet"] = o.IsCreateWallet
	return toSerialize, nil
}

type NullablePlayer struct {
	value *Player
	isSet bool
}

func (v NullablePlayer) Get() *Player {
	return v.value
}

func (v *NullablePlayer) Set(val *Player) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayer) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayer(val *Player) *NullablePlayer {
	return &NullablePlayer{value: val, isSet: true}
}

func (v NullablePlayer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


