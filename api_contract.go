/*
L3vels Api

L3vels API for Game developers

API version: 0.3
Contact: support@l3vels.xyz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package l3vels-sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ContractApiService ContractApi service
type ContractApiService service

type ApiCollectionSizeRequest struct {
	ctx context.Context
	ApiService *ContractApiService
	authorization *string
	collectionId *string
	projectId *string
}

// API key is associated with multiple projects. Please include it in to use developers API.
func (r ApiCollectionSizeRequest) Authorization(authorization string) ApiCollectionSizeRequest {
	r.authorization = &authorization
	return r
}

func (r ApiCollectionSizeRequest) CollectionId(collectionId string) ApiCollectionSizeRequest {
	r.collectionId = &collectionId
	return r
}

func (r ApiCollectionSizeRequest) ProjectId(projectId string) ApiCollectionSizeRequest {
	r.projectId = &projectId
	return r
}

func (r ApiCollectionSizeRequest) Execute() (*http.Response, error) {
	return r.ApiService.CollectionSizeExecute(r)
}

/*
CollectionSize Collection size

Get size of collection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCollectionSizeRequest
*/
func (a *ContractApiService) CollectionSize(ctx context.Context) ApiCollectionSizeRequest {
	return ApiCollectionSizeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ContractApiService) CollectionSizeExecute(r ApiCollectionSizeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContractApiService.CollectionSize")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/contract/collection-size"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.collectionId == nil {
		return nil, reportError("collectionId is required and must be specified")
	}
	if r.projectId == nil {
		return nil, reportError("projectId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "collection_id", r.collectionId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "project_id", r.projectId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiContractUriRequest struct {
	ctx context.Context
	ApiService *ContractApiService
	authorization *string
	collectionId *string
	projectId *string
}

// API key is associated with multiple projects. Please include it in to use developers API.
func (r ApiContractUriRequest) Authorization(authorization string) ApiContractUriRequest {
	r.authorization = &authorization
	return r
}

func (r ApiContractUriRequest) CollectionId(collectionId string) ApiContractUriRequest {
	r.collectionId = &collectionId
	return r
}

func (r ApiContractUriRequest) ProjectId(projectId string) ApiContractUriRequest {
	r.projectId = &projectId
	return r
}

func (r ApiContractUriRequest) Execute() (*http.Response, error) {
	return r.ApiService.ContractUriExecute(r)
}

/*
ContractUri Get Contract URI

Gets contract uri of contract

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiContractUriRequest
*/
func (a *ContractApiService) ContractUri(ctx context.Context) ApiContractUriRequest {
	return ApiContractUriRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ContractApiService) ContractUriExecute(r ApiContractUriRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContractApiService.ContractUri")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/contract/contract-uri"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.collectionId == nil {
		return nil, reportError("collectionId is required and must be specified")
	}
	if r.projectId == nil {
		return nil, reportError("projectId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "collection_id", r.collectionId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "project_id", r.projectId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSetContractUriRequest struct {
	ctx context.Context
	ApiService *ContractApiService
	authorization *string
	setContractUriDto *SetContractUriDto
}

// API key is associated with multiple projects. Please include it in to use developers API.
func (r ApiSetContractUriRequest) Authorization(authorization string) ApiSetContractUriRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSetContractUriRequest) SetContractUriDto(setContractUriDto SetContractUriDto) ApiSetContractUriRequest {
	r.setContractUriDto = &setContractUriDto
	return r
}

func (r ApiSetContractUriRequest) Execute() (*http.Response, error) {
	return r.ApiService.SetContractUriExecute(r)
}

/*
SetContractUri Update Contract URI

Update Contract URI

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetContractUriRequest
*/
func (a *ContractApiService) SetContractUri(ctx context.Context) ApiSetContractUriRequest {
	return ApiSetContractUriRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ContractApiService) SetContractUriExecute(r ApiSetContractUriRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContractApiService.SetContractUri")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/contract/contract-uri"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.setContractUriDto == nil {
		return nil, reportError("setContractUriDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	// body params
	localVarPostBody = r.setContractUriDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSetSaleStatusRequest struct {
	ctx context.Context
	ApiService *ContractApiService
	authorization *string
	setSaleStatusDto *SetSaleStatusDto
}

// API key is associated with multiple projects. Please include it in to use developers API.
func (r ApiSetSaleStatusRequest) Authorization(authorization string) ApiSetSaleStatusRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSetSaleStatusRequest) SetSaleStatusDto(setSaleStatusDto SetSaleStatusDto) ApiSetSaleStatusRequest {
	r.setSaleStatusDto = &setSaleStatusDto
	return r
}

func (r ApiSetSaleStatusRequest) Execute() (*http.Response, error) {
	return r.ApiService.SetSaleStatusExecute(r)
}

/*
SetSaleStatus Update Sale status

Update Sale status to PAUSED, PRE_SALE or PUBLIC

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetSaleStatusRequest
*/
func (a *ContractApiService) SetSaleStatus(ctx context.Context) ApiSetSaleStatusRequest {
	return ApiSetSaleStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ContractApiService) SetSaleStatusExecute(r ApiSetSaleStatusRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContractApiService.SetSaleStatus")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/contract/sale-status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.setSaleStatusDto == nil {
		return nil, reportError("setSaleStatusDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	// body params
	localVarPostBody = r.setSaleStatusDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
