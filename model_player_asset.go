/*
L3vels Api

L3vels API for Game developers

API version: 0.3
Contact: support@l3vels.xyz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package l3vels-sdk

import (
	"encoding/json"
	"time"
)

// checks if the PlayerAsset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerAsset{}

// PlayerAsset struct for PlayerAsset
type PlayerAsset struct {
	// The unique identifier for the Player asset entity.
	Id string `json:"id"`
	// The amount of the specific asset that the player has.
	Amount float32 `json:"amount"`
	// The unique identifier of the player that the asset is associated with.
	PlayerId string `json:"player_id"`
	// The unique identifier of the asset that the asset is associated with.
	AssetId string `json:"asset_id"`
	// The unique identifier of the collection that the Player asset is associated with.
	CollectionId string `json:"collection_id"`
	// The unique identifier of the account that the Player belongs to.
	AccountId float32 `json:"account_id"`
	// The unique identifier of the project that the Player is associated with. This allows developers to organize their players by project and helps with tracking and reporting.
	ProjectId string `json:"project_id"`
	// The date when the player was created.
	CreatedOn time.Time `json:"created_on"`
	// The date when the player was last modified.
	ModifiedOn time.Time `json:"modified_on"`
	// The Id of the user who created the player.
	CreatedBy float32 `json:"created_by"`
	// The Id of the user who last modified the player.
	ModifiedBy float32 `json:"modified_by"`
}

// NewPlayerAsset instantiates a new PlayerAsset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerAsset(id string, amount float32, playerId string, assetId string, collectionId string, accountId float32, projectId string, createdOn time.Time, modifiedOn time.Time, createdBy float32, modifiedBy float32) *PlayerAsset {
	this := PlayerAsset{}
	this.Id = id
	this.Amount = amount
	this.PlayerId = playerId
	this.AssetId = assetId
	this.CollectionId = collectionId
	this.AccountId = accountId
	this.ProjectId = projectId
	this.CreatedOn = createdOn
	this.ModifiedOn = modifiedOn
	this.CreatedBy = createdBy
	this.ModifiedBy = modifiedBy
	return &this
}

// NewPlayerAssetWithDefaults instantiates a new PlayerAsset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerAssetWithDefaults() *PlayerAsset {
	this := PlayerAsset{}
	return &this
}

// GetId returns the Id field value
func (o *PlayerAsset) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PlayerAsset) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PlayerAsset) SetId(v string) {
	o.Id = v
}

// GetAmount returns the Amount field value
func (o *PlayerAsset) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PlayerAsset) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PlayerAsset) SetAmount(v float32) {
	o.Amount = v
}

// GetPlayerId returns the PlayerId field value
func (o *PlayerAsset) GetPlayerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlayerId
}

// GetPlayerIdOk returns a tuple with the PlayerId field value
// and a boolean to check if the value has been set.
func (o *PlayerAsset) GetPlayerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayerId, true
}

// SetPlayerId sets field value
func (o *PlayerAsset) SetPlayerId(v string) {
	o.PlayerId = v
}

// GetAssetId returns the AssetId field value
func (o *PlayerAsset) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *PlayerAsset) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *PlayerAsset) SetAssetId(v string) {
	o.AssetId = v
}

// GetCollectionId returns the CollectionId field value
func (o *PlayerAsset) GetCollectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CollectionId
}

// GetCollectionIdOk returns a tuple with the CollectionId field value
// and a boolean to check if the value has been set.
func (o *PlayerAsset) GetCollectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectionId, true
}

// SetCollectionId sets field value
func (o *PlayerAsset) SetCollectionId(v string) {
	o.CollectionId = v
}

// GetAccountId returns the AccountId field value
func (o *PlayerAsset) GetAccountId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *PlayerAsset) GetAccountIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *PlayerAsset) SetAccountId(v float32) {
	o.AccountId = v
}

// GetProjectId returns the ProjectId field value
func (o *PlayerAsset) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *PlayerAsset) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *PlayerAsset) SetProjectId(v string) {
	o.ProjectId = v
}

// GetCreatedOn returns the CreatedOn field value
func (o *PlayerAsset) GetCreatedOn() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value
// and a boolean to check if the value has been set.
func (o *PlayerAsset) GetCreatedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedOn, true
}

// SetCreatedOn sets field value
func (o *PlayerAsset) SetCreatedOn(v time.Time) {
	o.CreatedOn = v
}

// GetModifiedOn returns the ModifiedOn field value
func (o *PlayerAsset) GetModifiedOn() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedOn
}

// GetModifiedOnOk returns a tuple with the ModifiedOn field value
// and a boolean to check if the value has been set.
func (o *PlayerAsset) GetModifiedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedOn, true
}

// SetModifiedOn sets field value
func (o *PlayerAsset) SetModifiedOn(v time.Time) {
	o.ModifiedOn = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *PlayerAsset) GetCreatedBy() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *PlayerAsset) GetCreatedByOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *PlayerAsset) SetCreatedBy(v float32) {
	o.CreatedBy = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *PlayerAsset) GetModifiedBy() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *PlayerAsset) GetModifiedByOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *PlayerAsset) SetModifiedBy(v float32) {
	o.ModifiedBy = v
}

func (o PlayerAsset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerAsset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["amount"] = o.Amount
	toSerialize["player_id"] = o.PlayerId
	toSerialize["asset_id"] = o.AssetId
	toSerialize["collection_id"] = o.CollectionId
	toSerialize["account_id"] = o.AccountId
	toSerialize["project_id"] = o.ProjectId
	toSerialize["created_on"] = o.CreatedOn
	toSerialize["modified_on"] = o.ModifiedOn
	toSerialize["created_by"] = o.CreatedBy
	toSerialize["modified_by"] = o.ModifiedBy
	return toSerialize, nil
}

type NullablePlayerAsset struct {
	value *PlayerAsset
	isSet bool
}

func (v NullablePlayerAsset) Get() *PlayerAsset {
	return v.value
}

func (v *NullablePlayerAsset) Set(val *PlayerAsset) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerAsset) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerAsset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerAsset(val *PlayerAsset) *NullablePlayerAsset {
	return &NullablePlayerAsset{value: val, isSet: true}
}

func (v NullablePlayerAsset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerAsset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


